<?xml version="1.0" encoding="utf-8" ?>
<!--
    Style Guide:
    See PCRaster.xsd

    types:
      Interval open or closed, halfOpen, containing possible infinite number
               of values, e.g. interval of floats [0,1]
      Set
      Range    a closed interval
-->
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema"
           xmlns:pcr="http://www.pcraster.nl/pcrxml"
           elementFormDefault="qualified"
           targetNamespace="http://www.pcraster.nl/pcrxml">

<xs:simpleType name="Non0UnsignedInt">
 <xs:restriction base="xs:unsignedInt">
  <xs:minInclusive value="1"/>
 </xs:restriction>
</xs:simpleType>

<xs:complexType name="EmptyElement">
 <xs:sequence>
 </xs:sequence>
</xs:complexType>

<xs:complexType name="TimeDuration">
 <xs:annotation>
  <xs:documentation>FTTB, 
    simpel: 1) kies 1 van deze kan nog uitgebreid worden met toestaan
               van b.v 2,5 dag:   days:2 hours:12
               door huidige definitie te upgraden naar sequence i.p.v.
               choice
            2) ondersteun geen years/month
                math is dan afhankelijk van het hebben  van een begin punt
            3) ondersteun geen days
                modelleer als 24 uur
                dan kunnen we nu mappen op boost::posix::time_duration
                toevoegen days moeten we mappen 

  </xs:documentation>
 </xs:annotation>
 <xs:choice>
 <!--
  <xs:element name="years"  type="xs:unsignedInt"
                           minOccurs="0" maxOccurs="1"/>
  <xs:element name="months" type="xs:unsignedInt"
                           minOccurs="0" maxOccurs="1"/>
  <xs:element name="days" type="xs:unsignedInt"
                           minOccurs="0" maxOccurs="1"/>
  -->
  <xs:element name="hours" type="xs:unsignedInt"
                           minOccurs="0" maxOccurs="1"/>
  <xs:element name="minutes" type="xs:unsignedInt"
                           minOccurs="0" maxOccurs="1"/>
  <xs:element name="seconds" type="xs:unsignedInt"
                           minOccurs="0" maxOccurs="1"/>
 </xs:choice>
</xs:complexType>

<!--complex types -->

<xs:complexType name="OneBasedIntegerSet">
 <xs:annotation>
  <xs:documentation>Set of integers, non empty</xs:documentation>
 </xs:annotation>
 <xs:sequence>
  <xs:element name="item"  type="pcr:Non0UnsignedInt"
                           minOccurs="1" maxOccurs="unbounded"/>
 </xs:sequence>
</xs:complexType>

<xs:complexType name="OneBasedIntegerRange">
 <xs:annotation>
   <xs:documentation>Set of integers, defined by range</xs:documentation>
 </xs:annotation>
 <xs:sequence>
  <xs:element name="begin"     type="pcr:Non0UnsignedInt"/>
  <xs:element name="end"       type="pcr:Non0UnsignedInt"/>
  <xs:element name="increment" type="pcr:Non0UnsignedInt">
      <xs:annotation>
       <xs:documentation>Implementation detail: a default of 1
                         seems natural, but then is OneBasedIntegerRange
                         not "template compatible" with FloatRange
       </xs:documentation>
      </xs:annotation>
  </xs:element>
 </xs:sequence>
</xs:complexType>

<xs:complexType name="OneBasedIntegerRangeOrSet">
 <xs:annotation>
   <xs:documentation>Set of integers, defined by range or set</xs:documentation>
 </xs:annotation>
 <xs:choice>
  <xs:element name="range"     type="pcr:OneBasedIntegerRange"/>
  <xs:element name="set"       type="pcr:OneBasedIntegerSet"/>
 </xs:choice>
</xs:complexType>

<!--
<xs:complexType name="TimeRange">
 <xs:sequence>
  <xs:element name="begin"     type="xs:dateTime"/>
  <xs:element name="end"       type="xs:dateTime"/>
  <xs:element name="increment" type="xs:time"/>
 </xs:sequence>
</xs:complexType>
-->

<xs:complexType name="StringSet">
 <xs:annotation>
  <xs:documentation>Set of strings, non empty</xs:documentation>
 </xs:annotation>
 <xs:sequence>
  <xs:element name="item"  type="xs:string"
                           minOccurs="1" maxOccurs="unbounded"/>
 </xs:sequence>
</xs:complexType>

<xs:complexType name="FloatSet">
 <xs:annotation>
  <xs:documentation>Set of floats, non empty</xs:documentation>
 </xs:annotation>
 <xs:sequence>
  <xs:element name="item"  type="xs:float"
                           minOccurs="1" maxOccurs="unbounded"/>
 </xs:sequence>
</xs:complexType>

<xs:complexType name="FloatRange">
 <xs:sequence>
  <xs:element name="begin"     type="xs:float"/>
  <xs:element name="end"       type="xs:float"/>
  <xs:element name="increment" type="xs:float"/>
 </xs:sequence>
</xs:complexType>

<xs:complexType name="FloatRangeOrSet">
 <xs:annotation>
   <xs:documentation>Set of floats, defined by range or set</xs:documentation>
 </xs:annotation>
 <xs:choice>
  <xs:element name="range"     type="pcr:FloatRange"/>
  <xs:element name="set"       type="pcr:FloatSet"/>
 </xs:choice>
</xs:complexType>

<xs:complexType name="NrRowsNrCols">
 <xs:sequence>
  <xs:element name="nrRows" type="pcr:Non0UnsignedInt">
     <xs:annotation>
      <xs:documentation>Number of rows</xs:documentation>
     </xs:annotation>
  </xs:element>
  <xs:element name="nrCols" type="pcr:Non0UnsignedInt">
   <xs:annotation>
     <xs:documentation>Number of columns</xs:documentation>
   </xs:annotation>
  </xs:element>
 </xs:sequence>
</xs:complexType>

 <xs:simpleType name="SpaceTrimmedToken">
   <xs:annotation>
     <xs:documentation>Token with no ending or trailing spaces</xs:documentation>
   </xs:annotation>
     <xs:restriction base="xs:string">
         <xs:minLength value="1"/>
         <xs:pattern value="[\S](.*[\S])?"/>
     </xs:restriction>
 </xs:simpleType>

<xs:simpleType name="Identifier">
 <xs:restriction base="xs:string">
  <xs:pattern value="[a-zA-Z_][a-zA-Z0-9_]*"/>
 </xs:restriction>
</xs:simpleType>

<xs:element name="unitTestOnlyDuration" type="pcr:TimeDuration"/>

</xs:schema>
