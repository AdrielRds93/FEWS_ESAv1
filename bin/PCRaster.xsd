<?xml version="1.0" encoding="utf-8" ?>
<!--
    RELEASE VERSION April 9 2007

    - changes
       - added more executionOptions child elements, almost
         all pcrcalc command line flags are now supported

    Style Guide:
    - all names are CamelCased
    - element names start with a lower case
    - type names start with an upper case and end with the type
    - element names are choosen such that their semantics are global
      unique. e.g. textStatisticsSubject is only a local child of textStatistics,
      so subject as name might suffice, but not if in the future the subject
      part is made global
    - for integer specification only the fixed 32 bit machine size types must
      be used.
    - do not use xs:all (see v/d Vlist)

    Todo design:
    - Split up in more files: 1) type part 2) instance schema file per
        document element
    - improve on EmptyElement, placeholder for further extension
    - see if ID does the job in keeping things unique.
       Currenly the collection of name-attrs of all definition 
       and textStatistics elements can not contain duplicates
    -  Alle attributen  en elementen moeten een name en type attribute hebben.
    - scoping (default NO)
    - MemoryExchange
         1) check that exchange is not both input and output
    - invariants to check:
       if definition has a memoryExchange then spatialType must be present
       and set to Spatial or NonSpatial
    Documentation:
    - check out  http://www.filigris.com/products/docflex_xsd/
       found at http://www.w3.org/XML/Schema
-->

<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema"
           xmlns:pcr="http://www.pcraster.nl/pcrxml"
           xmlns="http://www.pcraster.nl/pcrxml"
           elementFormDefault="qualified"
           targetNamespace="http://www.pcraster.nl/pcrxml">

<xs:include schemaLocation="commonTypes.xsd"/>

    <!-- document (root) elements -->

    <xs:element name="script"     type="pcr:Script">
       <xs:unique name="memoryExchangeUnique">
       <xs:annotation>
       <xs:documentation>
        Every memoryExchange item should have an unique value
       </xs:documentation>
       </xs:annotation>
         <!-- better: <xs:selector xpath=".//*[pcr:memoryExchange]"/> 
              any element with a child element memoryExchange
               but Xerces seems to support only a subset of XPath
              So we do this:
           -->
         <xs:selector xpath="./pcr:definition/*"/>
         <xs:field xpath="pcr:memoryExchange"/>
       </xs:unique>
    </xs:element>

    <xs:element name="linkInLibraryManifest" type="pcr:LinkInLibraryManifest">
     <xs:annotation>
       <xs:documentation>defines what a library contains, if this element is
       found as a root element of a file named z.xml for a pcrcalc linkIn library,
       then the code library is expected to be found as z.dll on Windows and
       libx.so on Linux.
       </xs:documentation>
     </xs:annotation>
       <xs:unique name="classAndFunctionNamesUnique">
       <xs:annotation>
       <xs:documentation>
        each defined class and function should have an unique name
       </xs:documentation>
       </xs:annotation>
         <xs:selector xpath="./*"/>
         <xs:field xpath="pcr:name"/>
       </xs:unique>
    </xs:element>
    <xs:element name="linkInCheckInput"    type="pcr:LinkInCheckInput"/>
    <xs:element name="linkInCheckResult"   type="pcr:LinkInCheckResult"/>
    <xs:element name="linkInExecuteInput"  type="pcr:LinkInExecuteInput"/>
    <xs:element name="linkInExecuteResult" type="pcr:LinkInExecuteResult"/>

<!--  EXPOSED ONLY FOR UNIT TESTING:
      should move to own schema
-->
    <xs:element name="areaMap"    type="pcr:AreaMap"/>
    <xs:element name="definition" type="pcr:Definition"/>
    <xs:element name="model"      type="pcr:Model"/>
    <xs:element name="textStatistics" type="pcr:TextStatistics"/>

    <!--type definitions-->


    <xs:simpleType name="SpatialType">
     <xs:annotation>
      <xs:documentation>The types allowed in checks and manifest operations
      </xs:documentation>
     </xs:annotation>
     <xs:restriction base="xs:string">
      <xs:enumeration value="Spatial"/>
      <xs:enumeration value="NonSpatial"/>
      <xs:enumeration value="Either"/>
     </xs:restriction>
    </xs:simpleType>

    <xs:simpleType name="SpatialTypeOfValue">
     <xs:annotation>
      <xs:documentation>The types allowed of values in execute operations
      </xs:documentation>
     </xs:annotation>
     <xs:restriction base="pcr:SpatialType">
      <xs:enumeration value="Spatial"/>
      <xs:enumeration value="NonSpatial"/>
     </xs:restriction>
    </xs:simpleType>


    <xs:simpleType name="MemoryExchange">
     <xs:annotation>
      <xs:documentation>The index used in memory exchange
      </xs:documentation>
     </xs:annotation>
     <xs:restriction base="xs:unsignedInt">
      <xs:minInclusive value="0"/>
     </xs:restriction>
    </xs:simpleType>

    <xs:complexType name="Exchange">
     <xs:choice minOccurs="0" maxOccurs="1">
        <xs:element name="external" type="xs:string">
          <xs:annotation>
           <xs:documentation>An external identifier, e.g. a file
           </xs:documentation>
          </xs:annotation>
        </xs:element>
        <xs:element name="memoryExchange" type="pcr:MemoryExchange" />
     </xs:choice>
    </xs:complexType>

    <xs:complexType name="Description">
      <xs:annotation>
       <xs:documentation>A description, only plain text supported at this moment
       </xs:documentation>
      </xs:annotation>
      <xs:sequence>
       <xs:element name="text" type="xs:string"/>
      </xs:sequence>
    </xs:complexType>

    <xs:simpleType name="ModelInputType">
     <xs:restriction base="xs:string">
      <xs:enumeration value="Constant" />
      <xs:enumeration value="None" />
      <xs:enumeration value="Initial" />
     <xs:enumeration value="Dynamic" />
    </xs:restriction>
    </xs:simpleType>

    <xs:simpleType name="ModelOutputType">
     <xs:restriction base="xs:string">
      <xs:enumeration value="Fixed" />
      <xs:enumeration value="Initial" />
      <xs:enumeration value="Dynamic" />
     </xs:restriction>
    </xs:simpleType>

    <xs:complexType name="ModelExchange">
<!--
     <xs:restriction base="xs:string">
      <xs:enumeration value=""/>
     </xs:restriction>
-->
     <xs:attribute name="input"  type="pcr:ModelInputType"/>
     <xs:attribute name="output" type="pcr:ModelOutputType"/>
    </xs:complexType>

    <xs:simpleType name="LookupColumn">
        <xs:annotation>
            <xs:documentation>PCRaster key interval notation for lookup tables
                e.g a cell in a row column lookup table
                valid examples
                1
                [3,4>
                [9, >
            </xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string">
            <xs:minLength value="1"/>
        </xs:restriction>
    </xs:simpleType>



    <xs:complexType name="OutputMapFormat">
      <xs:annotation>
        <xs:documentation>This looks now if it could be solved by an enumeration. However, extensions are envisioned where a specific OutputMapFormat has additional information. For example esriGridFormat might specify the target geoDatabase in which the maps should be written</xs:documentation>
      </xs:annotation>
      <xs:choice>
        <xs:element name="pcrasterMapFormat" type="pcr:EmptyElement"/>
        <xs:element name="bandMapFormat"     type="pcr:EmptyElement"/>
        <xs:element name="esriGridFormat"    type="pcr:EmptyElement"/>
      </xs:choice>
    </xs:complexType>

    <xs:simpleType name="CellCoordinate">
      <xs:annotation>
        <xs:documentation>
         mapping of coorcentre,coorul(upperleft),coorlr(lowerright) global options.
         </xs:documentation>
      </xs:annotation>
     <xs:restriction base="xs:string">
      <xs:enumeration value="Centre"/>
      <xs:enumeration value="UpperLeft"/>
      <xs:enumeration value="LowerRight"/>
     </xs:restriction>
    </xs:simpleType>

    <xs:simpleType name="DirectionalValueUnit">
      <xs:annotation>
        <xs:documentation>
         mapping of degrees,radians global options.
         </xs:documentation>
      </xs:annotation>
     <xs:restriction base="xs:string">
      <xs:enumeration value="Degrees"/>
      <xs:enumeration value="Radians"/>
     </xs:restriction>
    </xs:simpleType>

    <xs:simpleType name="LddCreateDemMethod">
      <xs:annotation>
        <xs:documentation>
         mapping of lddfill and lddcut global options</xs:documentation>
      </xs:annotation>
     <xs:restriction base="xs:string">
      <xs:enumeration value="Fill"/>
      <xs:enumeration value="Cut"/>
     </xs:restriction>
    </xs:simpleType>
    <xs:simpleType name="DynamicWaveRoughness">
      <xs:annotation>
        <xs:documentation>
         mapping of manning(default) and chezy global options</xs:documentation>
      </xs:annotation>
     <xs:restriction base="xs:string">
      <xs:enumeration value="Manning"/>
      <xs:enumeration value="Chezy"/>
     </xs:restriction>
    </xs:simpleType>

    <xs:complexType name="ExecutionOptions">
        <xs:sequence>
            <xs:element name="outputMapFormat" type="pcr:OutputMapFormat" minOccurs="0"/>
            <xs:element name="diagonal"        type="xs:boolean" minOccurs="0">
             <xs:annotation>
               <xs:documentation>global option mapping
                  diagonal=true  diagonal
                  diagonal=false nondiagonal
                </xs:documentation>
             </xs:annotation>
            </xs:element>
            <xs:element name="twoColumnTableAsMatrix" type="xs:boolean" minOccurs="0">
             <xs:annotation>
               <xs:documentation>global option mapping
                  true  ->columntable
                  false ->matrixtable
                </xs:documentation>
             </xs:annotation>
            </xs:element>
            <xs:element name="keepEdgePits" type="xs:boolean" minOccurs="0">
             <xs:annotation>
               <xs:documentation>global option mapping
                  true  ->lddout
                  false ->lddin
                </xs:documentation>
             </xs:annotation>
            </xs:element>
            <xs:element name="trueCellUnits" type="xs:boolean" minOccurs="0">
             <xs:annotation>
               <xs:documentation>global option mapping
                  true  ->unittrue
                  false ->unitcell
                </xs:documentation>
             </xs:annotation>
            </xs:element>
            <xs:element name="cellCoordinate" type="pcr:CellCoordinate" minOccurs="0"/>
            <xs:element name="directionalValueUnit" type="pcr:DirectionalValueUnit" minOccurs="0"/>
            <xs:element name="lddCreateDemMethod" type="pcr:LddCreateDemMethod" minOccurs="0"/>
            <xs:element name="dynamicWaveRoughness" type="pcr:DynamicWaveRoughness" minOccurs="0"/>
            <xs:element name="runDirectory" type="xs:string" minOccurs="0">
             <xs:annotation>
               <xs:documentation>command line mapping: -r </xs:documentation>
             </xs:annotation>
            </xs:element>
            <xs:element name="randomGeneratorSeed" type="pcr:Non0UnsignedInt" minOccurs="0">
             <xs:annotation>
               <xs:documentation>command line mapping: -s </xs:documentation>
             </xs:annotation>
            </xs:element>
            <xs:element name="maskCompression" type="pcr:EmptyElement" minOccurs="0">
             <xs:annotation>
               <xs:documentation>command line mapping: -m </xs:documentation>
             </xs:annotation>
            </xs:element>
            <xs:element name="useDiskStorage" type="pcr:EmptyElement" minOccurs="0">
             <xs:annotation>
               <xs:documentation>command line mapping: -l </xs:documentation>
             </xs:annotation>
            </xs:element>
            <!--
               more to follow here such as the command line options:
               -1 timeseries writing
            -->
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="Script">
      <xs:sequence>
        <xs:element name="executionOptions" type="pcr:ExecutionOptions" minOccurs="0" maxOccurs="1"/>
        <xs:element name="areaMap"          type="pcr:AreaMapScript" minOccurs="0" maxOccurs="1"/>
        <xs:element name="computationMask"  type="pcr:ComputationMask" minOccurs="0" maxOccurs="1"/>
        <xs:element name="definition"       type="pcr:Definition" minOccurs="0" maxOccurs="unbounded"/>
        <xs:element name="timer"            type="pcr:TimerOfModel" minOccurs="0" maxOccurs="1"/>
        <xs:element name="model"            type="pcr:Model" minOccurs="0" maxOccurs="1"/>
        <xs:element name="textStatistics"   type="pcr:TextStatistics" minOccurs="0" maxOccurs="unbounded"/>
      </xs:sequence>
    </xs:complexType>

    <xs:complexType name="Model">
        <xs:choice>
            <xs:element name="textModel" type="xs:string" minOccurs="1" maxOccurs="1">
                <xs:annotation>
                    <xs:documentation>textual model consisting of:
                        - series of statements separated with ";"
                        - an (optional) initial section and a dynamic section
                    </xs:documentation>
                </xs:annotation>
            </xs:element>
<!-- NOT USED YET
            <xs:element name="statement" type="xs:string" minOccurs="1" maxOccurs="unbounded">
                <xs:annotation>
                    <xs:documentation>simple assignment style statements
                    </xs:documentation>
                </xs:annotation>
            </xs:element>
            <xs:element name="textModelRef" type="xs:string" minOccurs="1" maxOccurs="1">
                <xs:annotation>
                    <xs:documentation>as textModel but the element contents is a file name (or url)
                        containing the textual model.
                    </xs:documentation>
                </xs:annotation>
            </xs:element>
-->
        </xs:choice>
    </xs:complexType>

    <xs:complexType name="TextStatisticsSubject" >
        <xs:annotation>
            <xs:documentation>field subject to statistics generation
            </xs:documentation>
        </xs:annotation>
        <xs:attribute name="fieldRef" type="xs:IDREF" use="required"/>
        <xs:attribute name="intervalRef" type="xs:IDREF" use="optional"/>
    </xs:complexType>

    <xs:complexType name="TextStatistics">
        <xs:sequence>
            <xs:element name="textStatisticsSubject" type="pcr:TextStatisticsSubject" minOccurs="1" maxOccurs="2"/>
        </xs:sequence>
        <xs:attribute name="name" type="xs:IDREF" use="optional">
            <xs:annotation>
                <xs:documentation>the name refers to a definition, to supply a scriptOutput
                    element on how to output the result.
                </xs:documentation>
            </xs:annotation>
        </xs:attribute>
    </xs:complexType>

    <xs:complexType name="LookupRow">
        <xs:annotation>
            <xs:documentation>PCRaster key interval notation for lookup tables
                e.g a cell in a row column lookup table
                valid examples
                1
                [3,4>
                [9, >
            </xs:documentation>
        </xs:annotation>
        <xs:sequence>
            <xs:element name="lookupColumn" type="pcr:LookupColumn" minOccurs="1" maxOccurs="unbounded"/>
        </xs:sequence>
    </xs:complexType>

   <xs:complexType name="Relation">
     <xs:choice>
      <xs:element name="lookupTable"  type="pcr:LookupTable"/>
      <xs:element name="indexedArray" type="pcr:IndexedArray"/>
    </xs:choice>
   </xs:complexType>

   <xs:simpleType name="ArrayDimensionDataType">
    <xs:annotation>
     <xs:documentation>Type of the array dimension fields
     </xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string">
     <xs:enumeration value="unsignedInt">
      <xs:annotation>
       <xs:documentation>as xs:unsignedInt, 32 bit value</xs:documentation>
      </xs:annotation>
     </xs:enumeration>
    </xs:restriction>
   </xs:simpleType>

   <xs:simpleType name="ArrayValueDataType">
    <xs:annotation>
     <xs:documentation>Type of the array dimension fields
     </xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string">
     <xs:enumeration value="int">
      <xs:annotation>
       <xs:documentation>as xs:int, 32 bit value</xs:documentation>
      </xs:annotation>
     </xs:enumeration>
     <xs:enumeration value="float">
      <xs:annotation>
       <xs:documentation>as xs:float, 32 bit IEEE</xs:documentation>
      </xs:annotation>
     </xs:enumeration>
     <xs:enumeration value="double">
      <xs:annotation>
       <xs:documentation>as xs:double, 64 bit IEEE</xs:documentation>
      </xs:annotation>
     </xs:enumeration>
    </xs:restriction>
   </xs:simpleType>

   <xs:complexType name="IndexedArray">
    <xs:annotation>
     <xs:documentation>
       Describes properties needed for exchanging the array by
       memory.
       TODO: model indexOfFirstElement, now it is one-based
             because timeinput also does one-based.
     </xs:documentation>
    </xs:annotation>
    <xs:sequence>
     <xs:element name="dimensionDataType"  type="pcr:ArrayDimensionDataType"/>
     <xs:element name="valueDataType"  type="pcr:ArrayValueDataType"/>
    </xs:sequence>
   </xs:complexType>

    <xs:complexType name="LookupTable">
        <xs:choice>
            <xs:element name="lookupRow" type="pcr:LookupRow" minOccurs="1" maxOccurs="unbounded"/>
        </xs:choice>
    </xs:complexType>

    <xs:complexType name="FieldValueOrType">
        <xs:annotation>
            <xs:documentation>
                Specifiy a (constant, NonSpatial) value by number or specify the
                type (DataType plus SpatialType) allowed
            </xs:documentation>
        </xs:annotation>
        <xs:sequence>
          <xs:element name="dataType" type="pcr:DataType" minOccurs="0" maxOccurs="1"/>
          <xs:choice minOccurs="0" maxOccurs="1">
            <xs:element name="number" type="xs:double"/>
            <xs:element name="spatialType" type="pcr:SpatialType"/>
          </xs:choice>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="Definition">
        <xs:annotation>
            <xs:documentation>
                each PCRaster model symbol that plays a role in the xml exchange
                is introduced by a definition. Additional symbols may be introduced
                in the text of the statements.
            </xs:documentation>
        </xs:annotation>
        <xs:sequence>
            <xs:element name="description" type="pcr:Description" minOccurs="0" maxOccurs="1"/>
            <xs:choice minOccurs="0" maxOccurs="1">
                <xs:annotation>
                    <xs:documentation>
                        a symbol may be specified more specifically as a field or
                        a relation.
                    </xs:documentation>
                </xs:annotation>
                <xs:element name="field"    type="pcr:FieldValueOrType"/>
                <xs:element name="relation" type="pcr:Relation"/>
            </xs:choice>
            <!-- TODO rethink name and if element or attr, demo only -->
            <xs:element name="modelExchange" type="pcr:ModelExchange" minOccurs="0" maxOccurs="1"/>
            <xs:element name="scriptInput" type="pcr:Exchange" minOccurs="0" maxOccurs="1"/>
            <xs:element name="scriptOutput" type="pcr:Exchange" minOccurs="0" maxOccurs="1"/>
        </xs:sequence>
        <xs:attribute name="name" type="xs:ID" use="required"/>
    </xs:complexType>

    <xs:complexType name="Boolean"/>
    <xs:complexType name="Nominal"/>
    <xs:complexType name="Ordinal"/>
    <xs:complexType name="Directional"/>
    <xs:complexType name="Ldd"/>

    <xs:complexType name="Scalar">
        <xs:annotation>
            <xs:documentation>
              data type, see PCRaster User Manual

             TODO: 
              - subtyping OpenMI compliant, if no sub elements then dimensionless
              - "dimensions and units zitten in OpenMI ook niet goed" (R. Brinkman)
              - baseType should be double not integer (according to OpenMI?)

              Units vs Dimensions: Units is specifieker dan dimensions, en
              volgens mij kan je uit UNITS altijd je dimensions afleiden. Units
              specificeren impliciet conversiefactoren, en dus hoef je niet de
              conversiefactor naar basedimensions op te geven. Voorbeeld: als je
              weet dat je temperatuur (dimensie) meet heb je aan een waarde van
              32.0 nog niet zo veel. Als je weet dat je graden celsius meet (Unit),
              weet je dat dat temperatuur is (de dimensie van graden celsius),
              en kan je de waarde 32.0 dus ook interpreteren. Nu is ook mogelijk,
              zonder dat je dat verder specificeert, om die om te rekenen naar
              graden Fahrenheit.

            </xs:documentation>
        </xs:annotation>
        <xs:sequence>
            <xs:element name="length" type="xs:double" minOccurs="0" maxOccurs="1"/>
            <xs:element name="mass" type="xs:double" minOccurs="0" maxOccurs="1"/>
            <xs:element name="time" type="xs:double" minOccurs="0" maxOccurs="1"/>
            <xs:element name="electricCurrent" type="xs:double" minOccurs="0" maxOccurs="1"/>
            <xs:element name="temperature" type="xs:double" minOccurs="0" maxOccurs="1"/>
            <xs:element name="amountOfSubstance" type="xs:double" minOccurs="0" maxOccurs="1"/>
            <xs:element name="luminousIntensity" type="xs:double" minOccurs="0" maxOccurs="1"/>
            <xs:element name="currency" type="xs:double" minOccurs="0" maxOccurs="1"/>
        </xs:sequence>
    </xs:complexType>


 <xs:complexType name="DataType">
  <xs:annotation>
   <xs:documentation>
     data type, see PCRaster User Manual

     The types allowed in checks and manifest operations

     order of declaration in sequence matches enum definition of pcrme model engine

    ((boolean|nominal|ordinal),?legend) |(scalar,*dimension)|directional|ldd)
      of dataTypeSet ? meerdere mogelijk
    DatType kan b.v (boolean or nominal)

   uitbreiden van de valuescales zoals nu gedefinieerd richting subclasses:
   scalar, maar alleen waarden tussen -30 en +30,
   posscalar, alleen positieve waarden + 0
   negscalar, alleen negatieve waarden plus 0
   gehele getallen en positieve gehele getallen (kan nu in nominal,
   maar nominal is een gekke klasse als we het werkelijk over aantallen
   hebben, dus aantal varkens,  dagnummer in het jaar ed, zijn gehele
   getallen (en positief) maar zijn geen nominale schalen). Ook deze zaken
   zouden in het script en in de kaart zelf moeten worden bijgehouden.

   TODO: sub typing for dataTypes that are classified (boolean,nominal,ordinal)
        a legend could be derived from here
        for example:  soils = (clay,sand,peat)
        with mapping: soils = (clay=0,sand=1,peat=2)
   </xs:documentation>
  </xs:annotation>
    <xs:sequence>
        <xs:element name="boolean"      type="pcr:Boolean"     minOccurs="0" maxOccurs="1"/>
        <xs:element name="nominal"      type="pcr:Nominal"     minOccurs="0" maxOccurs="1"/>
        <xs:element name="ordinal"      type="pcr:Ordinal"     minOccurs="0" maxOccurs="1"/>
        <xs:element name="scalar"       type="pcr:Scalar"      minOccurs="0" maxOccurs="1"/>
        <xs:element name="directional"  type="pcr:Directional" minOccurs="0" maxOccurs="1"/>
        <xs:element name="ldd"          type="pcr:Ldd"         minOccurs="0" maxOccurs="1"/>
    </xs:sequence>
  </xs:complexType>

  <xs:complexType name="DataTypeOfValue">
   <xs:annotation>
    <xs:documentation>
      The types allowed of values in execute operations
   </xs:documentation>
  </xs:annotation>
    <xs:choice>
     <xs:sequence>
        <xs:annotation>
         <xs:documentation>maps to UINT1</xs:documentation>
        </xs:annotation>
        <xs:element name="boolean"      type="pcr:Boolean"     minOccurs="0" maxOccurs="1"/>
        <xs:element name="ldd"          type="pcr:Ldd"         minOccurs="0" maxOccurs="1"/>
     </xs:sequence>
     <xs:sequence>
        <xs:annotation>
         <xs:documentation>maps to INT4</xs:documentation>
        </xs:annotation>
        <xs:element name="nominal"      type="pcr:Nominal"     minOccurs="0" maxOccurs="1"/>
        <xs:element name="ordinal"      type="pcr:Ordinal"     minOccurs="0" maxOccurs="1"/>
     </xs:sequence>
     <xs:sequence>
        <xs:annotation>
         <xs:documentation>maps to REAL4</xs:documentation>
        </xs:annotation>
        <xs:element name="scalar"       type="pcr:Scalar"      minOccurs="0" maxOccurs="1"/>
        <xs:element name="directional"  type="pcr:Directional" minOccurs="0" maxOccurs="1"/>
     </xs:sequence>
    </xs:choice>
  </xs:complexType>


    <xs:complexType name="CoordinateMask">
        <xs:annotation>
            <xs:documentation>a mask defined by coordinates that defines which cells are used in the computation</xs:documentation>
        </xs:annotation>
        <xs:sequence>
            <xs:element name="xMinimum" type="xs:double"/>
            <xs:element name="xMaximum" type="xs:double"/>
            <xs:element name="yMinimum" type="xs:double"/>
            <xs:element name="yMaximum" type="xs:double"/>
        </xs:sequence>
    </xs:complexType>

    <xs:group name="RasterSpace">
     <xs:sequence>
       <xs:element name="nrRows" type="pcr:Non0UnsignedInt">
           <xs:annotation>
               <xs:documentation>Number of rows in raster</xs:documentation>
           </xs:annotation>
       </xs:element>
       <xs:element name="nrCols" type="pcr:Non0UnsignedInt">
           <xs:annotation>
               <xs:documentation>Number of columns in raster</xs:documentation>
           </xs:annotation>
       </xs:element>
       <xs:element name="cellSize" type="xs:double" default="1.0" minOccurs="0">
           <xs:annotation>
               <xs:documentation>Length of square cell within the raster</xs:documentation>
           </xs:annotation>
       </xs:element>
       <xs:element name="xLowerLeftCorner" type="xs:double" default="0.0" minOccurs="0">
           <xs:annotation>
               <xs:documentation>X coordinate of lower left corner of the raster</xs:documentation>
           </xs:annotation>
       </xs:element>
       <xs:element name="yLowerLeftCorner" type="xs:double" default="0.0" minOccurs="0">
           <xs:annotation>
               <xs:documentation>Y coordinate of lower left corner of the raster</xs:documentation>
           </xs:annotation>
       </xs:element>
      </xs:sequence>
     </xs:group>

    <xs:complexType name="AreaMap">
     <xs:group ref="RasterSpace"/>
    </xs:complexType>

    <xs:complexType name="FieldReference" >
        <xs:annotation>
            <xs:documentation>reference to a definition with field type
            </xs:documentation>
        </xs:annotation>
          <xs:attribute name="ref" type="xs:IDREF" use="required"/>
    </xs:complexType>

    <xs:complexType name="AreaMapScript">
     <xs:choice>
     <xs:element name="fieldReference" type="pcr:FieldReference">
     </xs:element>
     <xs:group ref="RasterSpace"/>
     </xs:choice>
    </xs:complexType>

    <xs:simpleType name="MaskMapType">
     <xs:annotation>
      <xs:documentation>At what values computation is done
      </xs:documentation>
     </xs:annotation>
     <xs:restriction base="xs:string">
      <xs:enumeration value="computeAtNonMissingValues">
      <xs:annotation>
          <xs:documentation>
             Computation is done at every cell that is NOT a missing
             value in the ComputationMaskMap.
             This is not possible with the command line -m.
          </xs:documentation>
      </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="computeAtNonZeroValues">
      <xs:annotation>
          <xs:documentation>
             Computation is done at every cell that is NOT a missing
             value AND not equal to zero in the ComputationMaskMap.
             This is the command line -m default.
          </xs:documentation>
      </xs:annotation>
      </xs:enumeration>
     </xs:restriction>
    </xs:simpleType>

    <xs:complexType name="ComputationMaskByAreaMap" >
      <xs:annotation>
          <xs:documentation>
          </xs:documentation>
      </xs:annotation>
      <xs:attribute name="maskType" type="pcr:MaskMapType" use="required"/>
    </xs:complexType>

    <xs:complexType name="ComputationMask">
    <!-- all elements are applied one after the other:
         a mask set by areaMap can become smaller by
         applying the coordinates.
      -->
      <xs:sequence>
        <xs:element name="areaMap" type="pcr:ComputationMaskByAreaMap" maxOccurs="1" minOccurs="0"/>
       <!--
        <xs:element name="cells" type="pcr:EmptyElement" maxOccurs="1" minOccurs="0">
         <xs:annotation>
           <xs:documentation>a bit string that defines which cells are used in the computation. TODO: define the datatype</xs:documentation>
         </xs:annotation>
        </xs:element>
        -->
        <xs:element name="coordinates" type="pcr:CoordinateMask" maxOccurs="1" minOccurs="0"/>
      </xs:sequence>
    </xs:complexType>

    <xs:complexType name="TimerOfModel">
         <xs:annotation>
          <xs:documentation>
           Integer models the current PCRaster integer (> 0) based time
           counter. Future extensions may define others then integer based on
           real time.
          </xs:documentation>
         </xs:annotation>
      <xs:sequence>
       <xs:element name="integer" type="pcr:IntegerTimer"/>
      </xs:sequence>
    </xs:complexType>

    <xs:complexType name="IntegerTimer">
         <xs:annotation>
          <xs:documentation>
           Model will run from start to (inclusive) end.
           Start and end are equal to the pcrcalc script timer as in
             timer start end 1;
           The step is fixed to 1.
           start is required, if end is ommitted the model will run indefinitely
          </xs:documentation>
         </xs:annotation>
      <xs:sequence>
       <xs:element name="start"   type="pcr:Non0UnsignedInt" maxOccurs="1" minOccurs="1"/>
       <xs:element name="end"     type="pcr:Non0UnsignedInt" maxOccurs="1" minOccurs="0"/>
      </xs:sequence>
    </xs:complexType>

    <xs:complexType name="TimerContext">
      <xs:sequence>
       <xs:element name="current" type="xs:unsignedInt"/>
       <xs:element name="start"   type="xs:unsignedInt" maxOccurs="1" minOccurs="0"/>
       <xs:element name="end"     type="xs:unsignedInt" maxOccurs="1" minOccurs="0"/>
      </xs:sequence>
    </xs:complexType>

    <xs:complexType name="CheckContext">
      <xs:sequence>
       <xs:element name="areaMap"         type="pcr:AreaMap"         maxOccurs="1" minOccurs="0"/>
       <xs:element name="computationMask" type="pcr:ComputationMask" maxOccurs="1" minOccurs="0"/>
       <xs:element name="timer"           type="pcr:TimerContext"     maxOccurs="1" minOccurs="0"/>
      </xs:sequence>
    </xs:complexType>

    <xs:complexType name="RunContext">
      <xs:sequence>
       <xs:element name="areaMap"         type="pcr:AreaMap"         />
       <xs:element name="computationMask" type="pcr:ComputationMask" maxOccurs="1" minOccurs="0"/>
       <xs:element name="timer"           type="pcr:TimerContext"           />
      </xs:sequence>
    </xs:complexType>


 <xs:complexType name="LinkInLibraryManifest">
  <xs:annotation>
   <xs:documentation>see linkInLibraryManifest
     definition of a 'call point': a call point is any
     function, constructor or method defined in a manifest.
   </xs:documentation>
       </xs:annotation>
       <xs:sequence>
           <xs:element name="function"  type="pcr:LinkInFunctionManifest"
            minOccurs="0" maxOccurs="unbounded"/>
           <xs:element name="class" type="pcr:LinkInClassManifest"
            minOccurs="0" maxOccurs="unbounded">
             <xs:unique name="methodNamesUnique">
             <xs:annotation>
             <xs:documentation>
              each defined method should have an unique name
             </xs:documentation>
             </xs:annotation>
               <xs:selector xpath="./*"/>
               <xs:field xpath="pcr:name"/>
             </xs:unique>
           </xs:element>
       </xs:sequence>
  </xs:complexType>

 <xs:complexType name="LinkInClassManifest">
  <xs:annotation>
   <xs:documentation>
   </xs:documentation>
       </xs:annotation>
       <xs:sequence>
          <xs:element name="name"        type="pcr:Identifier"/>
          <xs:element name="constructor" type="pcr:LinkInClassConstructor"/>
          <xs:element name="method"      type="pcr:LinkInClassMethod"
                       minOccurs="0" maxOccurs="unbounded"/>
       </xs:sequence>
  </xs:complexType>

 <xs:complexType name="LinkInClassConstructor">
  <xs:annotation>
   <xs:documentation>
   </xs:documentation>
       </xs:annotation>
       <xs:sequence>
           <xs:element name="stringArgument" type="pcr:SpaceTrimmedToken"
                       minOccurs="0" maxOccurs="1"/>
           <xs:element name="argument"  type="pcr:FieldType"
                       minOccurs="0" maxOccurs="unbounded"/>
       </xs:sequence>
  </xs:complexType>

 <xs:complexType name="FieldType">
  <xs:sequence>
     <xs:element name="dataType"    type="pcr:DataType"/>
     <xs:element name="spatialType" type="pcr:SpatialType"/>
  </xs:sequence>
  </xs:complexType>
 <xs:complexType name="FieldTypeOfValue">
  <xs:sequence>
     <xs:element name="dataType"    type="pcr:DataTypeOfValue"/>
     <xs:element name="spatialType" type="pcr:SpatialTypeOfValue"/>
  </xs:sequence>
  </xs:complexType>

 <xs:complexType name="LinkInClassMethod">
  <xs:annotation>
   <xs:documentation>
   </xs:documentation>
       </xs:annotation>
       <xs:sequence>
          <xs:element name="name"       type="pcr:Identifier"/>
           <xs:element name="result"    type="pcr:FieldType"
                       minOccurs="0" maxOccurs="unbounded"/>
           <xs:element name="stringArgument" type="pcr:SpaceTrimmedToken"
                       minOccurs="0" maxOccurs="1"/>
           <xs:element name="argument"  type="pcr:FieldType"
                       minOccurs="0" maxOccurs="unbounded"/>
       </xs:sequence>
  </xs:complexType>

 <xs:complexType name="LinkInFunctionManifest">
  <xs:annotation>
   <xs:documentation>
   </xs:documentation>
       </xs:annotation>
       <xs:sequence>
           <xs:element name="name"    type="pcr:Identifier"/>
           <xs:element name="result"    type="pcr:FieldType"
                       minOccurs="1" maxOccurs="unbounded"/>
           <xs:element name="stringArgument" type="pcr:SpaceTrimmedToken"
                       minOccurs="0" maxOccurs="1"/>
           <xs:element name="argument"  type="pcr:FieldType"
                       minOccurs="0" maxOccurs="unbounded"/>
       </xs:sequence>
  </xs:complexType>

  <xs:complexType name="CallPoint">
   <xs:sequence>
     <xs:choice>
      <xs:element name="object">
       <xs:complexType>
       <xs:sequence>
         <xs:element name="className"   type="pcr:Identifier"/>
         <xs:element name="objectName"  type="pcr:Identifier"/>
         <xs:choice>
          <xs:element name="constructor" type="pcr:EmptyElement"/>
          <xs:element name="methodName"  type="pcr:Identifier"/>
         </xs:choice>
       </xs:sequence>
       </xs:complexType>
      </xs:element>
      <xs:element name="function">
       <xs:complexType>
       <xs:sequence>
         <xs:element name="name" type="pcr:Identifier"/>
       </xs:sequence>
       </xs:complexType>
      </xs:element>
     </xs:choice>
   </xs:sequence>
  </xs:complexType>

  <xs:complexType name="LinkInCheckInput">
   <xs:sequence>
     <xs:element name="context"   type="pcr:CheckContext"/>
     <xs:element name="callPoint" type="pcr:CallPoint"/>
     <xs:element name="result"    type="pcr:FieldType"
                       minOccurs="0" maxOccurs="unbounded"/>
     <xs:element name="stringArgument" type="pcr:SpaceTrimmedToken"
                       minOccurs="0" maxOccurs="1"/>
     <xs:element name="argument"  type="pcr:FieldType"
                       minOccurs="0" maxOccurs="unbounded"/>
   </xs:sequence>
  </xs:complexType>

  <xs:complexType name="LinkInCheckResult">
   <xs:sequence>
     <xs:element name="error"     type="xs:string"
                       minOccurs="0" maxOccurs="1"/>
     <xs:element name="result"    type="pcr:FieldType"
                       minOccurs="0" maxOccurs="unbounded"/>
     <xs:element name="argument"  type="pcr:FieldType"
                       minOccurs="0" maxOccurs="unbounded"/>
   </xs:sequence>
  </xs:complexType>

  <xs:complexType name="LinkInExecuteInput">
   <xs:sequence>
     <xs:element name="context"   type="pcr:RunContext"/>
     <xs:element name="callPoint" type="pcr:CallPoint"/>
     <xs:element name="result"    type="pcr:FieldTypeOfValue"
                       minOccurs="0" maxOccurs="unbounded"/>
     <xs:element name="stringArgument" type="pcr:SpaceTrimmedToken"
                       minOccurs="0" maxOccurs="1"/>
     <xs:element name="argument"  type="pcr:FieldTypeOfValue"
                       minOccurs="0" maxOccurs="unbounded"/>
   </xs:sequence>
  </xs:complexType>

  <xs:complexType name="LinkInExecuteResult">
   <xs:sequence>
     <xs:element name="error"     type="xs:string"
                       minOccurs="0" maxOccurs="1"/>
   </xs:sequence>
  </xs:complexType>

</xs:schema>
